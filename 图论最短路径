/*
 *
 *最短路算法
 *
 */
//Floyd算法 邻接表
int dist[400][400];
void Floyd(int n)
{
    for (int k = 1; k <= n; ++k)
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
}
//Floyd初始化
memset(dist, 63, sizeof(dist));
//利用memset的特性，先把所有距离初始化为0x3f3f3f3f，注意这个数的两倍小于32位和64位机器上的INT_MAX
for (int i = 1; i <= n; ++i)
    dist[i][i] = 0;
for (int i = 0; i < m; ++i)
{
    int u, v, w;
    scanf("%d%d%d", &u, &v, &w);
    dist[u][v] = w;
}


//Ballman-Ford算法
//松弛操作
dist[y] = min(dist[y], dist[x] + e[x][y]);//这里的e[x][y]表示x、y之间的距离，具体形式可能根据存图方法不同而改变

struct Edge{int from , to , val}edge[E];
int d[V] , v , e;
//要判断负边就用for循环v次 替代while，第v次依然更新了则存在负边
void ballmanford(int s){
    for (int i = 0 ; i < v ; i ++) d[i] = INF;
    d[s] = 0;
    while (true){
        bool update = false;
        for (int i = 0 ; i < e ; i ++){
            Edge e = edge[i];
            if (d[e.from] != INF && d[e.to] > d[e.from] + e.val) {
                d[e.to] = d[e.from] + e.val;
                update = true;
            }
        }
        if (!update) break;
    }
}

//spfa
bool inq[300100];
void spfa(){
    fill(d,d+n+5,-INF);
    d[1] = 0;
    inq[1] = true;
    queue<int> q;
    q.push(1);
    while (!q.empty()){
        int tp = q.front();  q.pop();
        inq[tp] = false;
        for (int i = 0 ; i < g[tp].size() ; i ++){
            Edge e = g[tp][i];
            if (d[e.t] < d[tp] + e.v){
                d[e.t] = d[tp] + e.v;
                if (inq[e.t] == false){
                    q.push(e.t);
                    inq[e.t] = true;
                }
            }
        }
    }
}

//Dijkstra
const int INF = 1e9+7;
const int E = 1000;
const int V = 1000;
struct Edge{int to , val;};
typedef pair<int ,int >P; // first 是最短距离，second 是顶点编号
int v , e , d[V];
vector<Edge> g[V];
void dijkstra(int s){
    priority_queue<P,vector<P>,greater<P> > que;
    fill(d,d+v,INF);
    d[s] = 0;
    que.push(P(0,s));
    while (!que.empty()){
        P p = que.top() ; que.pop();
        int v = p.second;
        if (d[v] < p.first) continue;
        for (int i = 0 ; i < g[v].size() ; i ++){
            Edge e = g[v][i];
            if (d[e.to] > d[v] + e.val){
                d[e.to] = d[v] + e.val;
                que.push(P(d[e.to] , e.to));
            }
        }
    }
}
