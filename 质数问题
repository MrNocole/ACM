//试除法判断素数
bool is_prime(int x)
{
    if (x < 2) return false;
    for (int i = 2; i <= x / i; i ++ )
        if (x % i == 0)
            return false;
    return true;
}

//埃氏筛
int primes[N], cnt;     // primes[]存储所有素数
bool st[N];         // st[x]存储x是否被筛掉
void get_primes(int n)
{
    for (int i = 2; i <= n; i ++ )
    {
        if (st[i]) continue;
        primes[cnt ++ ] = i;
        for (int j = i + i; j <= n; j += i)
            st[j] = true;
    }
}

//线性筛
int primes[N], cnt;     // primes[]存储所有素数
bool st[N];         // st[x]存储x是否被筛掉

void get_primes(int n)
{
    for (int i = 2; i <= n; i ++ )
    {
        if (!st[i]) primes[cnt ++ ] = i;
        for (int j = 0; primes[j] <= n / i; j ++ )
        {
            st[primes[j] * i] = true;
            if (i % primes[j] == 0) break;
        }
    }
}
//试除法分解质因数
vector<int> get_divisors(int x)
{
    vector<int> res;
    for (int i = 1; i <= x / i; i ++ )
        if (x % i == 0)
        {
            res.push_back(i);
            if (i != x / i) res.push_back(x / i);
        }
    sort(res.begin(), res.end());
    return res;
}
作者：yxc
链接：https://www.acwing.com/blog/content/406/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

//欧拉函数 求小于m并且与m互素的数的个数
int euler_phi(int n ){
    int res = n;
    for (int i = 2 ; i * i <= n ; i ++){
        if (n%i == 0){
            res = res/i*(i-1);
            for (;n%i==0;n/=i);
        }
    }
    if (n!=1)res = res/n*(n-1);
    return res;
}
//打欧拉函数表
const int MAX_N = 1000;
int euler[MAX_N];
void euler_phi2(){
    for (int i = 0 ; i < MAX_N ; i ++)euler[i] = i;
    for (int i = 2 ; i < MAX_N ; i ++){
        if (euler[i] == i){
            for (int j  = i ; j < MAX_N ; j += i)euler[j] = euler[j] / i *(i-1);
        }
    }
}
